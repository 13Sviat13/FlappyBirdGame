Проєкт "Flappy Bird" - це класична гра, в якій гравець керує пташкою, яка намагається перелетіти труби, які є на її шляху.

Складові
flappy_bir.py: Основний модуль, що містить основну логіки гри Flappy Bird та її компоненти.

bird_and_score.py: Цей модуль містить класи BirdAnimator та ScoreManager.
BirdAnimator: Клас, що відповідає за анімацію птаха. Він має методи bird_animation та rotate_bird,
які повертають наступну анімацію птаха та повертають птаха відповідно до руху.
ScoreManager: Клас, що відповідає за керування рахунком гри. Він має методи display_score та update_score,
які відображають поточний рахунок та оновлюють його відповідно до результатів гри.

game_strategy.py: Цей модуль містить класи GameStrategy та GraphicsManager.
GameStrategy: Клас, що відповідає за стратегію гри.
Він має метод check_collision, який перевіряє, чи сталася колізія між птахом та трубами.
GraphicsManager: Клас, що відповідає за керування графічними елементами гри.
Він має метод draw_floor, який відображає підлогу гри.

pipe.py: Цей модуль містить класи Pipe, PipeFactory та PipeComposite.
Pipe: Клас, що представляє окрему трубу. Він має атрибути y_pos, gap та surface, які визначають положення
та вигляд труби.
PipeFactory: Клас, що відповідає за створення нових труб. Він має метод create_pipe, який повертає нову трубу
з випадковим положенням.
PipeComposite: Клас, що представляє колекцію труб.
Він має методи add_pipe, move_pipes, draw_pipes та remove_pipes, які дозволяють додавати, переміщати, відображати
та видаляти труби.

unit_tests.py: Модуль, що містить юніт-тести для проєкту:
Кожен юніт тест у цьому коді перевіряє певну функціональність класів.

TestScoreManager - перевіряє клас ScoreManager, який відповідає за зберігання та відображення очок у грі.
test_init - перевіряє правильність ініціалізації об'єкта ScoreManager з заданими значеннями очок, найкращих очок, шрифту та екрану.
test_display_score - перевіряє відображення очок на екрані у двох станах: "main_game" та "game_over".
TestGameStrategy - перевіряє клас GameStrategy, який відповідає за логіку гри Flappy Bird.
test_init - перевіряє правильність ініціалізації об'єкта GameStrategy з заданими значеннями пташки, звуку смерті та екрану.
test_check_collision_true - перевіряє, чи правильно виявляється зіткнення між пташкою та трубами.
test_check_collision_outside_screen - перевіряє, чи правильно виявляється зіткнення між пташкою та межами екрану зверху.
test_check_collision_bottom_screen - перевіряє, чи правильно виявляється зіткнення між пташкою та межами екрану знизу.
TestPipeComposite - перевіряє клас PipeComposite, який відповідає за управління трубами у грі.
test_init - перевіряє правильність ініціалізації об'єкта PipeComposite з заданою поверхнею труби.
TestPipeFactory - перевіряє клас PipeFactory, який відповідає за створення труб у грі.
test_create_pipe - перевіряє, чи правильно створюється об'єкт труби класом PipeFactory.
TestGraphicsManager - перевіряє клас GraphicsManager, який відповідає за візуалізацію графіки у грі.
test_init - перевіряє правильність ініціалізації об'єкта GraphicsManager з заданим екраном.
test_draw_floor - перевіряє, чи правильно відображається підлога на екрані.

assets/: Каталог, що містить графічні ресурси для гри

sound/: Каталог, що містить аудіоресурси для гри

Залежності
pygame: Бібліотека для роботи з графіком та звуком у Python.
randon: Стандартний модуль Python для генерації випадкових чисел та вибірки елементів зі списку.


Запуск:
Для запуск гри потрібно мати встановлену бібліотеку Pygame та Python версії 3.x. Запустити файл flappy_bir PyCharm, а
перед тим також створити всі інші потрібні пайтон файли і вставити код

Патерни, які були використані в проєкті

1. PipeFactory (Factory Pattern) Тип патерну: Factory Pattern (Фабричний патерн)
Що він робить: Створює об'єкти Pipe з випадковими значеннями висоти та проміжку.
Для чого він використовується: Для генерації нових труб при ігровому процесі.
Як він допомагає вирішити проблему: Фабричний патерн дозволяє відокремити логіку створення об'єктів від їх використання,
о полегшує модифікацію та розширення коду.

2. PipeComposite (Composite Pattern) Тип патерну: Composite Pattern (Композитний патерн)
Що він робить: Манежує колекцією об'єктів Pipe, дозволяючи їх переміщення, малювання та видалення.
Для чого він використовується: Для організації та керування трубами на екрані.
Як він допомагає вирішити проблему: Композитний патерн дозволяє працювати з колекцією об'єктів, як з одним об'єктом,
що полегшує код та робить його більш гнучким.

3. GameStrategy ( Тип патерну: Поведінковий патерн
Що він робить: Перевіряє колізії між птахом та трубами, а також керує станом гри.
Для чого він використовується: Для керування логікою гри та визначення результатів колізій. Я
к він допомагає вирішити проблему: Стратегічний патерн дозволяє відокремити логіку гри від її реалізації,
що полегшує модифікацію та розширення коду.

4. BirdAnimator (Observer Pattern) Тип патерну: Observer Pattern (Патерн спостерігача)
Що він робить: Анімує птаха, змінюючи його зображення та кут нахилу.
Для чого він використовується: Для створення анімації птаха під час гри.
Як він допомагає вирішити проблему: Патерн спостерігача дозволяє відокремити логіку анімації від її реалізації,
що полегшує код та робить його більш гнучким.

5. ScoreManager (Singleton Pattern) Тип патерну: Singleton Pattern (Патерн одиночки)
Що він робить: Керує рахунком гри та відображає його на екрані. Для чого він використовується:
Для зберігання та відображення рахунку гри.
Як він допомагає вирішити проблему: Патерн одиночки дозволяє створити єдиний об'єкт, який керує рахунком гри,
що полегшує доступ до нього з різних частин коду.

6. GraphicsManager (Singleton Pattern) Тип патерну: Singleton Pattern (Патерн одиночки)
Що він робить: Керує відображенням фону гри, включаючи малювання підлоги.
Для чого він використовується: Для відображення фону гри.
Як він допомагає вирішити проблему: Патерн одиночки дозволяє створити єдиний об'єкт, який керує відображенням фону гри,
що полегшує доступ до нього з різних частин коду.